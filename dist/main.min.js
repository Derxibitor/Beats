$(
() => {
    let color  = document.getElementsByClassName("colors__item")
    let colorArray = Array.from(color)

    colorArray.forEach((element) => {
        element.addEventListener("click", function(e) {
            targetText = $(e.target).next(".color__info")
            targetTextStatus = $(targetText).css("width")
            targetBlock = $(e.target).find(".color__menu-block")
            targetBox = $(e.target).closest(".colors__item")
            colorItem = document.querySelectorAll(".colors__item")

            if (targetTextStatus == "0px") {
                $(".colors__title").addClass("color__title--hover")
                $(".color__info").removeClass("color__info--hover")
                $(targetText).addClass("color__info--hover")
                $(colorItem).addClass("color__item--hover")
                $(targetBox).removeClass("color__item--hover")
            } else {
                $(".colors__item").removeClass("color__item--hover")
                $(".color__info").removeClass("color__info--hover")
                $(".colors__title").removeClass("color__title--hover")
            }
        })
    })
});$(
    () => {
    const validateFields = (form, fieldsArray) => {
        fieldsArray.forEach((field) => {
            field.removeClass("input-error")
            if (field.val().trim() == "") {
                field.addClass("input-error")
            }
        })

        const errorFields = form.find(".input-error")

        return errorFields.length == 0;
    }

    $(".form").submit(e => {
        e.preventDefault();

        const form = $(e.target)
        const name = form.find("[name='name']")
        const phone = form.find("[name='phone']")
        const comment = form.find("[name='comment']")
        const to = form.find("[name='to']")

        const isValid = validateFields(form, [name, phone, comment, to])

        const modal = $("#modal")
        const content = modal.find(".modal__content")

        modal.removeClass("error-modal")

        if (isValid) {
            const request = $.ajax({
                url: "https://webdev-api.loftschool.com/sendmail",
                method: "post",
                data: {
                    name: name.val(),
                    phone: phone.val(),
                    comment: comment.val(),
                    to: to.val()
                }
            })

            request.done((data) => {
                content.text(data.message)
            })

            request.fail((data) => {
                if (data.responseJSON) {
                    content.text(data.responseJSON.massage)
                }   else {
                    content.text('Произошла ошибка, попробуйте снова')
                }
                modal.addClass("error-modal")
            })

            request.always(() => {
                $.fancybox.open({
                    src: "#modal",
                    type: "inline"
                })
            })
        }
    })

    $(".app-submit-btn").click(e => {
        e.preventDefault();

        $.fancybox.close();
    })
});$(
    () => {
    $(".cross").on("click", () => {
        $(".fullscreen__menu").css("display", "none")
    })

    $(".dropdown").on("click", () => {
        $(".fullscreen__menu").css("display", "flex")
    })
});;let myMap;

const init = () => {
    myMap = new ymaps.Map("footer__map", {
        center: [55.76, 37.64],
        zoom: 13
    })

    const coords = [
        [55.759065, 37.616090],
        [55.750631, 37.611138],
        [55.745425, 37.589202],
        [55.757906, 37.588882]
    ]

    const myCollection = new ymaps.GeoObjectCollection({}, {
        draggable: false,
        iconLayout: 'default#image',
        iconImageHref: "./img/marker.png",
        iconImageSize: [46,57],
        iconImageOffset: [-35,-52],
    })

    coords.forEach(coord => {
        myCollection.add(new ymaps.Placemark(coord))
    })

    myMap.geoObjects.add(myCollection)

    myMap.behaviors.disable('scrollZoom')
};

ymaps.ready(init);;const sections = $("section")
const display = $(".main")

const performTransition = sectionEq => {
    const position = sectionEq * -100;

    display.css({
        transform: `translateY(${position}%)`
    });
}

$(window).on("wheel", e => {
    const deltaY = e.originalEvent.deltaY;

    if (deltaY > 0) {
        performTransition(8);
    } else if (deltaY < 0) {
        console.log(deltaY);
    }
});let player;
const playerContainer = $('.player')

let eventsInit = () => {
    $(".player__start").click(e => {
        e.preventDefault();

        if (playerContainer.hasClass("paused")) {
            playerContainer.removeClass("paused")
            player.pauseVideo()
        } else {
            playerContainer.addClass("paused")
            player.playVideo()
        }
    })
}

const formatTime = timeSec => {
    const roundTime = Math.round(timeSec);

    const minutes = addZero(Math.floor(roundTime / 60));
    const seconds = addZero(roundTime - minutes * 60);

    function addZero(num) {
        return num < 10 ? '0${num}' : num;
    }

    return '${minutes} : ${seconds}'
}

const onPlayerReady = () => {
    let interval;
    const durationSec = player.getDuration();
    
    $(".player__duration-estimate").text(formatTime(durationSec))

    if (typeof interval != 'undefined') {
        clearInterval(interval);
    }

    interval = setInterval(() => {
        const completedSec = player.getCurrentTime();
        const completedPercent = (completedSec / durationSec) * 100;
      
        $(".player__playback-button").css({
          left: `${completedPercent}%`
        });
       
        $(".player__duration-completed").text(formatTime(completedSec));
    }, 1000);
}

function onYouTubeIframeAPIReady() {
    player = new YT.Player('yt-player', {
        height: '390',
        width: '660',
        videoId: 'jpmJC4qBILs',
        events: {
            // 'onReady': onPlayerReady,
            // 'onStageChange': onPlayerStateChange,
        },
        playerVars: {
            controls: 0,
            disablekb: 0,
            showinfo: 0,
            rel: 0,
            autoplay: 0,
            modestbranding: 0
        }
    })
};$(
    () => {
    let userLink = document.getElementsByClassName("user-list__link")
    let userArray = Array.from(userLink)

    const findBlockByAlias = alias => {
        return $(".review__item").filter((ndx, item) => {
            return $(item).attr("data-linked-with") == alias;
        })
    }

    userArray.forEach((element) => {
        element.addEventListener("click", function (e) {
            let currentLink = $(e.target).closest(userLink)
            const target = $(e.target).attr("data-open")
            const itemToShow = findBlockByAlias(target)

            e.preventDefault();
            $(currentLink).addClass("user-list__link--active").siblings().removeClass("user-list__link--active")
            itemToShow.addClass("review__item--active").siblings().removeClass("review__item--active")
        });
    })
});;$(
    () => {
    const slider =  $('.products__list').bxSlider({
        pager: false,
        controls: false
    });

    $('.product__arrow--prev').click(e => {
        e.preventDefault();

        slider.goToPrevSlide();
    })
    $('.product__arrow--next').click(e => {
        e.preventDefault();

        slider.goToNextSlide();
    })
});;$(
    () => {
    let memberParam = document.getElementsByClassName("name__row")
    let memberArray = Array.from(memberParam)

    memberArray.forEach((element) => {
        element.addEventListener("click", function(e) {
            e.preventDefault();

            let target = $(e.target).closest('.name__row')
            let targetBox = $(target).siblings('.member__param-box')
            let targetStatus = $(targetBox).css("display")
            let arrow = $(e.target).siblings(".arrow-down")

            arrow.toggleClass("arrow--up")
            
            if (targetStatus == "none") {
                $('.member__param-box').css("display", "none")
                $(targetBox).css("display", "grid");
            } else if (targetStatus == "grid") {
                $(targetBox).css("display", "none");
            }

        })
    })
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
